Diagnosis and procedure data analysis - emr package in R
========================================================
author: Hsiang-Ju Chiu and Yi-Ju Tseng @ Chang Gung University
date: 2019/08/23
autosize: true
font-family: 'Microsoft JhengHei'
navigation: slide

Introduction - emr package
========================================================
- Provide mechanisms to **integrate**, **analyze**, and **visualize** diagnosis and procedure records
- Simplifie and accelerate the process of extracting **ready-for-analysis** datasets from EHRs 

Introduction - emr package
========================================================
- An R package 
- Open-source software on [GitHub](https://github.com/DHLab-CGU/emr)


You need to install R and RStudio for the first time
========================================================
type:section



R vs. RStudio
========================================================

[R](https://cloud.r-project.org/) : Core (engine)
```{r echo=FALSE,height=7}
knitr::include_graphics("https://www.teslarati.com/wp-content/uploads/2018/07/model-3-drivetrain-1.jpg")
```
[Source](https://www.teslarati.com/tesla-patent-more-efficient-electric-motors/)

R vs. RStudio
========================================================

[RStudio](https://www.rstudio.com/products/rstudio/download/#download) : IDE (dashboard)
```{r echo=FALSE}
knitr::include_graphics("emr_package-figure/dashboard.jpg")
```
[Source](https://www.theverge.com/2015/3/19/8260295/tesla-user-interface-redesign-concept)


You need to know how to use R and RStudio for the first time
========================================================
type:section

RStudio Interface
========================================================
left: 40%
4 Blocks in RStudioï¼š

- Source editor  -> edit the codes here
- Console -> get the results here
- environment/...
- File/Figure/...

***

```{r echo=FALSE}
knitr::include_graphics("emr_package-figure/RStudio.png")
```

R and R Packages
========================================================

R : Core (iPhone)

```{r echo=FALSE,out.height = "500px"}
knitr::include_graphics("https://store.storeimages.cdn-apple.com/4982/as-images.apple.com/is/iphone-xr-white-select-201809?wid=940&hei=1112&fmt=png-alpha&qlt=80&.v=1551226036668")
```

R and R Packages
========================================================

R Packages : APP

```{r echo=FALSE}
knitr::include_graphics("https://3c.yipee.cc/wp-content/uploads/2019/06/a7ffbaa3df50d7cafe6801a8a8d7a3bf-620x320.jpg")
```

[Source](https://www.apple.com/)


R = Base + Other Packages
========================================================
- How to install packages?
```{r eval=F}
install.packages("Package name")
```

- How to load the installed packages?
```{r eval=F}
library(Package name)
```


Functions - Basic
========================================================
- Basic functions
- Functions provided by packages (such as *emr*)
- `function_name(argument1, argument2,....)`

For example, we can get the average of numbers by `mean()` function:
```{r}
mean(c(1,2,3,4,5,6)) ##average of 1~6
```

Functions - Arguments
========================================================

If you don't know the defined order, you can assign the arguments by name

```{r}
seq(from=1,to=9,by=2)
```


Back to emr package
========================================================
type:section

How to install emr package?
========================================================
- Not on CRAN right now
- Install from GitHub (by *devtools* package)
```{r install, eval=FALSE}
install.packages("devtools")
devtools::install_github("DHLab-CGU/emr")
library(emr)
```
```{r setup, include=FALSE}
if(!require(emr)){
  if(!reuqire(devtools)){
    install.packages("devtools")
  }
  devtools::install_github("DHLab-CGU/emr")
  library(emr)
}
```

Other packages used in the tutorial
========================================================
```{r installOther, eval=FALSE}
install.packages("tidyverse")
install.packages("tableone")
library(tidyverse)
library(tableone)
```
```{r setupOther, include=FALSE}
if(!require(tidyverse)){
  install.packages("tidyverse")
  library(tidyverse)
}
if(!require(tableone)){
  install.packages("tableone")
  library(tableone)
}
```

PDA vs. non-PDA in MIMIC-III - a Use case
========================================================
type:section


Final goals of this tutorial
========================================================
Explore the comorbidity or underlying diseases difference between **patent ductus arteriosus (PDA)** and the **non-PDA** patients


Demo data
========================================================
- Sample file `sampleFile_MIMIC`
- [MIMIC-III](https://www.nature.com/articles/sdata201635), a dataset of 7,833 newborn patients with 45,674 admissions
```{r, eval=FALSE}
head(sample_MIMICIII)
```
```{r, echo=FALSE}
kable(head(sample_MIMICIII))
```

Steps to accomplish the goals
========================================================
1. Select PDA case
2. Group diagnosis records
3. Visualize the diagnosis records
4. Generate "Table 1" for the analysis


1. PDA case selection
========================================================
- Split the newborns (n = 7,833) into case (PDA) and control (non-PDA) groups:
  - PDA: 381
  - non-PDA: 7452

1. PDA case selection
========================================================
```{r}
selectedPDA <- 
  selectCases(sample_MIMICIII, 
              SUBJECT_ID, ICD9_CODE, 
              ADMITTIME, "2015/10/01", 
              ICD, caseCondition = "^7470", 
              caseCount = 1, 
              CaseName = "PDA")
```
```{r, eval = FALSE}
selectedPDA
```
```{r, echo = FALSE}
kable(selectedPDA[379:383])
```

1. PDA case selection - arguments
========================================================
- DxDataFile: sample_MIMICIII
- idColName: SUBJECT_ID
- icdColName: ICD9_CODE
- dateColName: ADMITTIME
```{r, eval = FALSE}
selectedPDA <- 
  selectCases(sample_MIMICIII, 
              SUBJECT_ID, ICD9_CODE, 
              ADMITTIME, "2015/10/01", 
              ICD, caseCondition = "^7470", 
              caseCount = 1, 
              CaseName = "PDA")
```

1. PDA case selection - arguments
========================================================
- icd10usingDate: 2015/10/01
- groupDataType: ICD (CCS, AHRQ, PheWAS...)
- caseCount: 1
- CaseName = "PDA"
```{r, eval = FALSE}
selectedPDA <- 
  selectCases(sample_MIMICIII, 
              SUBJECT_ID, ICD9_CODE, 
              ADMITTIME, "2015/10/01", 
              ICD, caseCondition = "^7470", 
              caseCount = 1, 
              CaseName = "PDA")
```

1. PDA case selection - check original data
========================================================
```{r, eval = FALSE}
selectedPDA
```
```{r, echo = FALSE}
kable(selectedPDA[379])
```
```{r, eval = FALSE}
sample_MIMICIII[SUBJECT_ID=="32433"&
                        grepl("^747",ICD9_CODE)]
```
```{r, echo = FALSE}
kable(sample_MIMICIII[SUBJECT_ID=="32433"&
                        grepl("^747",ICD9_CODE),
                      list(SUBJECT_ID,ICD9_CODE,ADMITTIME)])
```

Demo data
========================================================
```{r, eval=FALSE}
sample_MIMICIII[1:6,
                c("SUBJECT_ID", 
                  "ICD9_CODE", "ADMITTIME")]
```
```{r, echo=FALSE}
kable(sample_MIMICIII[1:6,
                      c("SUBJECT_ID", 
                  "ICD9_CODE", "ADMITTIME")])
```

2. Group diagnosis records
========================================================
- Group diagnostic codes with Elixhauser comorbidity
- Convert the long format of data into a **wide** format
- Arguments:
  - groupDataType: Elix (AHRQ, CCS)
  - isDescription: F (T)
  - selectedCaseFile: selectedPDA (From case select step)
```{r}
elix <- 
  groupedDataLongToWide(
    sample_MIMICIII,SUBJECT_ID,
    ICD9_CODE,ADMITTIME, 
    "9999-10-01", groupDataType = Elix, 
    isDescription = F, 
    selectedCaseFile = selectedPDA)
```

2. Group diagnosis records
========================================================
```{r, eval = FALSE}
elix
```
```{r, echo = FALSE}
kable(elix[17:21,c(1,15:19)])
```

3. Visualize the diagnosis records: histogram for comorbidity
========================================================
```{r, eval = TRUE, out.width ="50%"}
plot_Elixhauser <- plot_groupedData(elix)
plot_Elixhauser$graph
```


3. Visualize the diagnosis records: significantly different comorbidities
========================================================
```{r, eval = FALSE}
plot_Elixhauser$sigCate
```
```{r, echo = FALSE}
kable(plot_Elixhauser$sigCate)
```

4. Generate "Table 1" for the analysis
========================================================
```{r, eval = FALSE}
var_col <- 
  names(elix)[2:(length(elix)-1)]
table_Elix <- 
  CreateTableOne(vars = var_col,
                 strata = "selectedCase", 
                 data = as.data.frame(elix), 
                 factorVars = var_col)
table_Elix
```
```{r,echo = FALSE}
var_col <- names(elix)[2:(length(elix)-1)]
table_Elix <- CreateTableOne(vars = var_col,strata = "selectedCase", data = as.data.frame(elix), factorVars = var_col)
table <- print(table_Elix,quote = T,noSpaces = TRUE, printToggle = FALSE)
kable(table[c(1,3,4,8,10:12,14,17),])
```


Closer view of emr package
========================================================
type:section

Overview of emr package
========================================================
1. Code standardization
2. Data integration
3. Exploratory data analysis (EDA) preparation
4. Visualization

Overview of emr package
========================================================
```{r, echo=FALSE}
   knitr::include_graphics('./overview.jpg')
```


Data: another sample data
========================================================
- For illustrating the main functions of *emr* package
- Simulated medical data set of 38 patients with 300 records
```{r, eval=FALSE}
sampleDxFile[6:10]
```
```{r, echo=FALSE}
kable(sampleDxFile[6:10])
```



ICD formats
========================================================
- Standardize the ICD codes into a **uniform format** before analysis
  - short format: xxxyy
  - decimal format: xxx**.**yy

| ICD code  |         ICD-9          |        ICD-10          |
|----------:|-----------------------:|:-----------------------|
|**Diagnosis** |short and decimal format|short and decimal format|
|Procedure  |short and decimal format|     only decimal format|

Why we need to convert the ICD formats?
========================================================
- The formats of ICD used in the grouping tables could be different
- Already integrated into grouping method  

|                 ICD code                |  ICD format  |Code standardization|
|----------------------------------------:|-------------:|-------------------:|
|  Clinical Classifications Software (CCS)|short  format | IcdDxDecimalToShort|
|Phenome Wide Association Studies (PheWAS)|decimal format| IcdDxShortToDecimal|
|                              Comorbidity|short format  | IcdDxDecimalToShort|


1. Code standardization
========================================================
type:sub-section
- Transform the diagnosis codes into **uniform** format before analysis
- Check the correctness of ICD codes: with **clear warning messages** 
  - Help researchers identify the potential coding error that may affect analysis


1. Code standardization: short or decimal format
========================================================
- Uniform code format functions:
    - Decimal format: `IcdDxShortToDecimal`
    - Short format: `IcdDxDecimalToShort`
    
1. Code standardization: short or decimal format
========================================================    
```{r}
decimal <- 
  IcdDxShortToDecimal(sampleDxFile, ICD, 
                      Date, "2015/10/01")
short <- 
  IcdDxDecimalToShort(sampleDxFile, ICD, 
                      Date, "2015/10/01")
```
```{r, eval=FALSE}
cbind(decimal = decimal$ICD[6:10], 
      short = short$ICD[6:10])
```
```{r, echo=FALSE}
kable(cbind(decimal = decimal$ICD[6:10], short = short$ICD[6:10]))
```

1. Code standardization: warning message
========================================================
- Warning message: identify the potential coding error
- There are two types of warning message:
    -	wrong ICD code format
    - wrong ICD code version
- The **suggestoin** helps user adjust the incorrect ICD-9 code with **unspecified** classification (now only ICD-9 codes has suggestion).    

1. Code standardization: warning message
========================================================
```{r, eval=FALSE}
decimal$Error
```  

```{r, echo=FALSE}
kable(decimal$Error)
```    

2. Data integration
========================================================
type:sub-section

- We provide four strategies to **group** EHR diagnostic code.

- After grouping, this package provides functions for **querying matching cases**, **splitting data** and **generating condition era**  

2. Data integration
========================================================

Integrated EHR data: 
 1. Code classification
 2. Case selection
 3. Patient record period
 4. Data split
 5. Condition era calculation

2. Data integration: code classification
========================================================
- Four strategies to group EHR diagnosis codes:
   - **CCS**
          - `IcdDxToCCS()`
          - `IcdDxToCCSLvl()`
   - **PheWAS**: `IcdDxToPheWAS()`
   - **Comorbidity** (Elixhauser, AHRQ, and Charlson): `IcdDxToComorbid()` 
    - **Customized grouping methods**:
          - `IcdDxToCustom()`
          - `IcdDxToCustomGrep()`
 
2. Code classification - CCS
======================================================== 
```{r echo=FALSE}
knitr::include_graphics("emr_package-figure/CCS.PNG")
```

2. Code classification - PheWAS
======================================================== 
```{r echo=FALSE}
knitr::include_graphics("emr_package-figure/PheWAS.PNG")
```

2. Code classification - Comorbidity
======================================================== 
```{r echo=FALSE}
knitr::include_graphics("emr_package-figure/AHRQ.PNG")
```
 
2. Data integration: code classification
========================================================
- Grouped data by CCS multiple level 2
```{r}
CCSlvl <- 
  IcdDxToCCSLvl(sampleDxFile, 
                ID, ICD, Date, 
                "2015-10-01", 2)
```
```{r,eval=FALSE}
CCSlvl$groupedDT
```
```{r,echo=FALSE}
kable(head(CCSlvl$groupedDT))
```

2. Data integration: code classification
========================================================
- **Summarised** grouped data by CCS multiple level 2
```{r,eval=FALSE}
CCSlvl$summarised_groupedDT
```
```{r,echo=FALSE}
kable(head(CCSlvl$summarised_groupedDT))
```

2. Data integration: code classification
========================================================
- Grouped data by CCS single level
```{r}
CCS <- 
  IcdDxToCCS(sampleDxFile, 
                ID, ICD, Date, 
                "2015-10-01")
```
```{r,eval=FALSE}
CCS$groupedDT
```
```{r,echo=FALSE}
kable(head(CCS$groupedDT))
```

2. Data integration: code classification
========================================================
- **Summarised** grouped data by CCS single level
```{r,eval=FALSE}
CCS$summarised_groupedDT
```
```{r,echo=FALSE}
kable(head(CCS$summarised_groupedDT))
```

2. Data integration: case selection
========================================================
- Query the matched cases
- groupDataType: ccslvl2
```{r}
case <- 
  selectCases(sampleDxFile, ID, ICD, Date, 
              "2015/10/01", ccslvl2, 
              caseCondition = "Diseases of the urinary system", 
              caseCount = 1, 
              CaseName = "Selected")
```
```{r,eval=FALSE}
case[20:25]
```
```{r,echo=FALSE}
kable(case[20:25])
```

2. Data integration: patient record period
========================================================
- Get the first/last record date for each patient
```{r}
recordDate <- 
  patientRecordDate(sampleDxFile, ID, ICD, Date)
```
```{r,eval=FALSE}
recordDate
```
```{r,echo=FALSE}
kable(recordDate[grep("0$",ID),])
```


2. Data integration: data split
========================================================
- Split data by the date of clinical event.
    - Identify the data is recorded **before** or **after** the clinical event.
    - Count the number of windows between the record date and index date.

Index date
========================================================
These records can be used for a given patient as an index date for **data split** function.
```{r}
indexDateTable <- 
  data.frame(ID = c("A0","B0","C0","D0"), 
             indexDate = c("2023-08-12", "2024-02-12",
                           "2015-12-05", "2017-01-29"),
             stringsAsFactors = FALSE)
```
```{r,eval=FALSE}
indexDateTable
```
```{r,echo=FALSE}
kable(indexDateTable)
```

2. Data integration: data split
========================================================
- Gap: length of the window. Default set to 30.
- indexDateFile: indexDateTable
```{r}
certainPatient <- 
  sampleDxFile[grepl("A0|B0|C0|D0",ID),]
splitedData <- 
  splitDataByDate(certainPatient, ID, ICD, Date, 
                  indexDateTable, Gap = 30) 
```
```{r,eval=FALSE}
splitedData[15:19,]
```
```{r,echo=FALSE}
kable(splitedData[15:19,])
```

3. EDA preparation
========================================================
type:sub-section
- Convert the grouped data in long format into a wide format which is fit to others analytical and plotting function
- In the wide format, the variable can be in numeric and binary form
- One step method!

3. EDA preparation
========================================================

```{r}
wideData <- 
  groupedDataLongToWide(sampleDxFile, ID, 
                        ICD, Date, 
                        "2015-10-01", elix, 
                        isDescription = F)
```
```{r,eval=FALSE}
wideData[,-(2:14))
```
```{r,echo=FALSE}
kable(head(wideData[,-(2:14)]))
```

4. Visualization
========================================================
type:sub-section
- Visualized the overview of grouped clinical data
   - **Pareto chart** for error ICD list
   - **Histogram plot** for grouped data
 
4. Pareto plot for error ICD codes 
========================================================
- Plot for error ICD list
- In the first step, code standardization,the output include diagnosis codes with potential error
```{r, eval=TRUE, out.width = "35%"}
plotErrorICD <- 
  plot_errorICD(decimal$Error)
plotErrorICD$graph
```

4. Pareto plot for error ICD codes 
========================================================
- Top 10 ICD codes with errord
```{r, eval=FALSE}
plotErrorICD$ICD
```
```{r, echo=FALSE}
kable(plotErrorICD$ICD)
```

4. Histogram plot for grouped data
========================================================
- Plot of diagnostic categories
- Summarizes the percentage of diagnostic categories in a histogram plot
```{r, eval=TRUE, out.width = "35%"}
plotGroupedData <- 
  plot_groupedData(wideData)
plotGroupedData$graph
```

4. Histogram plot for grouped data
========================================================
Top 10 diagnostic categories grouped by Elixhauser comorbidity
```{r, eval=FALSE}
plotGroupedData$sigCate
```
```{r, echo=FALSE}
kable(plotGroupedData$sigCate)
```

Performance
========================================================
- Dataset: 953,294 unique patients with 7,948,418 diagnosis records.
  - Code standardization took 6.2 seconds
  - Data integration (including code standardization):
      - code classification with Charlson comorbidity took 8.5 seconds.
      - case selection took 14.3 seconds 
  - EDA preparation took 16.5 seconds. 
  - Visualizatoin: histogram plot took 1.0 seconds.


More details
========================================================
- Geting start
    - Diagnosis data
        - English: https://dhlab-cgu.github.io/emr/articles/Eng_Diagnosis.html
        - ä¸­æ–‡: https://dhlab-cgu.github.io/emr/articles/Chi_Diagnosis.html




Procedure data analysis
========================================================
type:section

Procedure: code standardzation
========================================================
- ICD procedure code format

| ICD code  |         ICD-9          |        ICD-10          |
|----------:|-----------------------:|:-----------------------|
|Diagnostic |short and decimal format|short and decimal format|
|**Procedure**|short and decimal format| only decimal format|

- ICD format in grouping methods

| ICD code       |  ICD format  |Code standardization|
|:---------------|:-------------|-------------------:|
|CCS             |short format  | IcdDxDecimalToShort|
|procedure class |short format  | IcdDxDecimalToShort|

Procedure: sample file
========================================================
- Sample file for procedure record, which has 3 patients and 170 records.

```{r, eval=FALSE}
samplePrFile[84:88]
```
```{r, echo=FALSE}
kable(samplePrFile[84:88])
```

Procedure: code standardization
========================================================
- Uniform code format functions:
    - Decimal format: `IcdPrShortToDecimal`
    - Short format: `IcdPrDecimalToShort`
- Procedure code standardization also has warning messages helping users identify the potential coding error.

Procedure: code classification
========================================================
- Collapse ICD procedure codes into clinically meaningful categories for further analysis 
- The functions of grouping procedure record:  
    - CCS
        - The CCS classification with single and multiple levels
        - Similar to the diagnostic CCS classification.
    - Procedure class  
   
    

Procedure: code classification
========================================================

```{r}
ProcedureClass <- 
  IcdPrToProcedureClass(samplePrFile, ID, ICD, 
                        Date, "2015-10-01")
```
```{r, eval=FALSE}
ProcedureClass$groupedDT
```
```{r, echo=FALSE}
ProcedureClass <- IcdPrToProcedureClass(samplePrFile, ID, ICD, Date, "2015-10-01")
kable(head(ProcedureClass$groupedDT))
```

More details
========================================================
- Geting start
    - Diagnosis data
        - English: https://dhlab-cgu.github.io/emr/articles/Eng_Diagnosis.html
        - ä¸­æ–‡: https://dhlab-cgu.github.io/emr/articles/Chi_Diagnosis.html
    - Procedure data
        - English: https://dhlab-cgu.github.io/emr/articles/Eng_Procedure.html
        - ä¸­æ–‡: https://dhlab-cgu.github.io/emr/articles/Chi_Procedure.html

